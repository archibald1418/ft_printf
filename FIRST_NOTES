# ft_printf
ft_printf project for 42


FT_PRNTF 
ОБЯЗАТЕЛЬНО ПРОЧЕСТЬ: https://www.lix.polytechnique.fr/~liberti/public/computing/prog/c/C/FUNCTIONS/format.html https://en.wikipedia.org/wiki/Printf_format_string
https://ru.wikipedia.org/wiki/Printf
man printf

парсер first thoughts:

1. поиск подстрок 
- какой-то сплит дергает из форматной строки подстроки (=субстром берет), которые соответствуют шаблону
- подстроки сохранить например в связном списке (ведь их кол-во потенциально неограничено) + всю необходимую инфу о подстроке, которую уже можно извлечь (длина строки + тип параметра: этого более чем хватит)
-  шаблон сформулировать на языке регулярных выражений (с полным раскрытием всех нетерминальных символов в этой грамматике)
- проверить его предсказательную силу на оригинальном принтф
- желательно нарисовать конечный автомат (движок), который идет и распознает этот шаблон
- распознал - вернул 1, не распознал - вернул 0
- уточнить у пиров описательную адекватность данного представления (покрывает ли он все кейсы)
- шаблон всей форматной строки будет тогда иметь вид типа «(.*?{шаблон_запроса}?)*» 

2. сбор и хранение информации

- ДЕЛАТЬ ЭТО ПОСЛЕ СПЛИТА - ИНАЧЕ ЗАЕБЕШЬСЯ
- очевидное решение - структура с типами + процент. Было в шаблоне - 0, не было - 1 (понадобится для обработчика (processor)
- + структура со всеми значениями параметров (для которых было 1) + значение аргументов из валиста (как обрабатывать несоответствие типов???)  
- в итоге узлел в списке - это i-тый шаблон запроса + структ с 0 и 1  + структура со значениями параметров и аргумента валиста
- узел списка кидается в обработчик и печатается какой-то магией (которую мы оставим на самый десерт)
